# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kbi_NqQO14PEf1Y9fTXq-Yfae8y6i45Q
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

# loading diabetes dataset
diabetesDataset = pd.read_csv("/content/diabetes.csv")

diabetesDataset.head()

diabetesDataset.groupby("Outcome").mean()

X = diabetesDataset.drop(columns = "Outcome", axis = 1)
Y = diabetesDataset["Outcome"]

print(Y)

scaler = StandardScaler()

scaler.fit(X)

standardizedData = scaler.transform(X)

print(standardizedData)

X = standardizedData
Y = diabetesDataset["Outcome"]

print(X)
print(Y)

XTrain, XTest, YTrain, YTest = train_test_split(X,Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, XTrain.shape, XTest.shape)

classifier = svm.SVC(kernel="linear")

classifier.fit(XTrain, YTrain)

XTrainPrediction = classifier.predict(XTrain)
trainingDataAccuracy = accuracy_score(XTrainPrediction, YTrain)

print("Accuracy score of the training data : ", trainingDataAccuracy)

XTestPrediction = classifier.predict(XTest)
testingDataAccuracy = accuracy_score(XTestPrediction, YTest)

print("Accuracy score of the testing data : ", testingDataAccuracy)

inputData = (11,143,94,33,146,36.6,0.254,51)

# change data to numpy array
inputDataAsNumpyArray = np.asarray(inputData)

# reshape the array
inputDataReshaped = inputDataAsNumpyArray.reshape(1,-1)

# standardize the input data
std_data = scaler.transform(inputDataReshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print("The person is not diabetic")
else:
  print("The person is diabetic")